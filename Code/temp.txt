import java.util.ArrayList;
import java.util.Iterator;

public abstract class GenericList<T> implements Iterable<T> {

  private Node<T> head;
  private int length;

  // inner class to represent a node in the linked list
  private static class Node<T> {
    T data;
    int code;
    Node<T> next;

    Node(T data) {
      this.data = data;
      this.next = null;
    }
  }

  public abstract void add(T data);
  public abstract T delete();

  public ArrayList<T> dumpList() {
    ArrayList<T> list = new ArrayList<T>();
    Node<T> current = head;
    while (current != null) {
      list.add(current.data);
      current = current.next;
    }
    return list;
  }

  public T get(int index) {
    if (index < 0 || index >= length) {
      return null;
    }
    Node<T> current = head;
    for (int i = 0; i < index; i++) {
      current = current.next;
    }
    return current.data;
  }

  public T set(int index, T element) {
    if (index < 0 || index >= length) {
      return null;
    }
    Node<T> current = head;
    for (int i = 0; i < index; i++) {
      current = current.next;
    }
    T oldData = current.data;
    current.data = element;
    return oldData;
  }

  public int getLength() {
    return length;
  }

  public void setLength(int length) {
    this.length = length;
  }

  public Node<T> getHead() {
    return head;
  }

  public void setHead(Node<T> head) {
    this.head = head;
  }

  public Iterator<T> descendingIterator() {
    return new Iterator<T>() {
      Node<T> current = head;
      int index = length - 1;

      @Override
      public boolean hasNext() {
        return index >= 0;
      }

      @Override
      public T next() {
        T data = get(index);
        index--;
        return data;
      }
    };
  }

  @Override
  public Iterator<T> iterator() {
    return new Iterator<T>() {
      Node<T> current = head;

      @Override
      public boolean hasNext() {
        return current != null;
      }

      @Override
      public T next() {
        T data = current.data;
        current = current.next;
        return data;
      }
    };
  }
}
